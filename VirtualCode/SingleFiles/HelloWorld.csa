LIR     #0x1000,    %R6 -- Set stack pointer

-- Print 'ABC'
LIR		#0x41,	%R0 	-- Load 'A' into R0
IOW		%R0,	#0x00	-- Print 'A'
LIR		#0x42,	%R0		-- Load 'B' into R0
IOW		%R0,	#0x00	-- Print 'B'
LIR		#0x43,	%R0		-- Load 'C' into R0
IOW		%R0,	#0x00	-- Print 'C'

JSR     $simplefunction

-- Print a string
LIR     $hellostring,   %R0 -- String to print
JSR     $printstring        -- Print string routine

-- Exit the program
LIR     #0x00,  %R0     -- Load exit code into R0
IOW     %R0,    #0xff   -- Send code to exit port

simplefunction:
LIR     #0x0D,  %R0
IOW     %R0,    #0x00
LIR     #0x0A,  %R0
IOW     %R0,    #0x00
RET

-- String to print
hellostring:
.'H'
.'e'
.'l'
.'l'
.'o'
.' '
.'W'
.'o'
.'r'
.'l'
.'d'
.'!'
.0x0D
.0x0A
.0

printstring:
PSH		%R1
PSH		%R2
PSH		%R3
PSH		%R4
-- %R0						-- Addr to print
MOV     %R0,        %R1     -- Char to print
LIR		$end,		%R2		-- End of function
LIR		#0x01,		%R3		-- One for NULL check
LIR		$printloop, %R4		-- Addr of loop head
-- %R5						-- Internal Use
-- %R6						-- Stack Pointer
-- %R7						-- Program Counter

	printloop:
	LOA 	%R1,	%R0				-- Load first char into R0
	JGT		%R3,	%R0,	%R2 	-- Jump to end if character is null
	IOW		%R0,	#00				-- Print character
	ADI		#0x01,	%R1				-- Increment R1
	JMP 	%R4

end:
POP		%R4
POP		%R3
POP		%R2
POP		%R1
RET
