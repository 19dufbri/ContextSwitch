-- struct Proc {
-- 	uint16_t regs[16];
-- 	Proc *next;	
-- };

Interupt:
-- Before run, S0-SF are saved regs from userland
-- R0 = Interupt Source
-- R1 = Current Process Iter
-- R2 = Register with 0x0001
-- R3 = Register with next Process
-- R4 = Current Process struct
-- RE = Program Counter
-- RF = Stack Pointer
LDI	0x0001, R2		-- Load one into temp reg

LDI 	ContextSwitch,	R5
SNE	R0,	R2		-- Skip if not equal
JPR	R5			-- If source is 1 (Timer), then run a context switch
REI 				-- Do other stuff	

ContextSwitch:
-- Before run, S0-SF are saved regs from userland
-- R0 = Interupt Source
-- R1 = Current Process Iter
-- R2 = Register with 0x0001
-- R3 = Register with next Process
-- R4 = Current Process struct
-- RE = Program Counter
-- RF = Stack Pointer
MOV	R4,	R1		-- Load iter with current process

-- Once for each R4-RF
STR	S0,	R1		-- Store reigister at cur proc save location
ADD	R1,	R1,	R2	-- Increment iter

STR	R3,	R1		-- Store the next proc as the next ptr of current proc

MOV	R3,	R4		-- Move next proc to current proc
MOV	R4,	R1		-- Load iter with new proc

-- Once for each R4-RF		
LDR	S0,	R1		-- Load register with saved value
ADD	R1, 	R1,	R2	-- Increment iter

STR	R1,	R3		-- Load next proc

REI